import type { ConvexDevice } from "@/types/convex";
import type { ExportFormat } from "@/types/form";

export interface ESPHomeFormattedCode {
  name: string;
  protocol: string;
  parameters: Record<string, string | number>;
}

/**
 * Converts device codes to ESPHome format for export dialog
 */
export function convertToESPHomeFormat(
  device: ConvexDevice,
): ESPHomeFormattedCode[] {
  return device.codes.map((code) => {
    const codeLines = code.code.split("\n");
    const protocol = codeLines[0]?.replace(":", "") || "nec";

    const parameters: Record<string, string | number> = {};
    codeLines.slice(1).forEach((line) => {
      const trimmed = line.trim();
      if (trimmed && trimmed.includes(":")) {
        const [key, value] = trimmed.split(":").map((s) => s.trim());
        if (key && value) {
          if (value.startsWith("0x") || !isNaN(Number(value))) {
            parameters[key] = value.startsWith("0x") ? value : Number(value);
          } else {
            parameters[key] = value.replace(/"/g, "");
          }
        }
      }
    });

    return {
      name: code.name,
      protocol: protocol,
      parameters: parameters,
    };
  });
}

/**
 * Generates export content for given format
 */
export function getExportContentForFormat(
  device: ConvexDevice,
  format: ExportFormat,
): string {
  switch (format) {
    case "json":
      const exportData = {
        device: {
          name: device.name,
          manufacturer: device.manufacturer,
          model: device.model || null,
          deviceType: device.deviceType,
        },
        exportInfo: {
          exportedAt: new Date().toISOString(),
          totalCodes: device.codes.length,
          format: "Remote Control Hub Quick Export v1.0",
        },
        codes: device.codes,
      };
      return JSON.stringify(exportData, null, 2);

    case "esphome":
      return generateESPHomeConfig(device);

    case "esphome-subdevice":
      return generateESPHomeSubdeviceConfig(device);

    default:
      return "";
  }
}

/**
 * Generates filename for export based on format
 */
export function getExportFileName(
  device: ConvexDevice,
  format: ExportFormat,
): string {
  const sanitizedName = device.name
    .replace(/[^a-zA-Z0-9_\s]/g, "")
    .replace(/\s+/g, "_")
    .toLowerCase();
  const timestamp = new Date().toISOString().split("T")[0];

  switch (format) {
    case "json":
      return `${sanitizedName}_remote_codes_${timestamp}.json`;
    case "esphome":
      return `${sanitizedName}_esphome_config_${timestamp}.yaml`;
    case "esphome-subdevice":
      return `${sanitizedName}_esphome_subdevice_config_${timestamp}.yaml`;
    default:
      return `${sanitizedName}_export.txt`;
  }
}

/**
 * Downloads content as file
 */
export function downloadFile(
  content: string,
  filename: string,
  mimeType: string,
): void {
  const blob = new Blob([content], { type: mimeType });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = filename;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
}

function generateESPHomeConfig(device: ConvexDevice): string {
  const sanitizedDeviceName = device.name
    .replace(/[^a-zA-Z0-9_]/g, "_")
    .toLowerCase();

  let yamlContent = `# ESPHome Remote Control Configuration
# Device: ${device.name} (${device.manufacturer}${device.model ? ` ${device.model}` : ""})
# Generated by Remote Control Hub
# Generated on: ${new Date().toLocaleString()}
# Total codes: ${device.codes.length}

# Add this to your ESPHome configuration file

# Remote transmitter configuration (add to your main config if not already present)
remote_transmitter:
  pin: GPIO14  # Change this to your IR LED pin
  carrier_duty_percent: 50%

# Button entities for ${device.name}
button:
`;

  device.codes.forEach((code) => {
    const sanitizedButtonName = code.name
      .replace(/[^a-zA-Z0-9_\s]/g, "")
      .trim();
    const buttonId = `${sanitizedDeviceName}_${sanitizedButtonName.replace(/\s+/g, "_").toLowerCase()}`;

    yamlContent += `  - platform: template
    name: "${device.name} ${sanitizedButtonName}"
    id: ${buttonId}
    on_press:
${generateESPHomeCodeBlock(code)}
`;
  });
  return yamlContent;
}

function generateESPHomeSubdeviceConfig(device: ConvexDevice): string {
  const sanitizedDeviceNameSub = device.name
    .replace(/[^a-zA-Z0-9_]/g, "_")
    .toLowerCase();

  let yamlContentSub = `# ESPHome Remote Control Configuration with Sub-Devices
# Device: ${device.name} (${device.manufacturer}${device.model ? ` ${device.model}` : ""})
# Generated by Remote Control Hub
# Generated on: ${new Date().toLocaleString()}
# Total codes: ${device.codes.length}

# Add this to your ESPHome configuration file

# Remote transmitter configuration (add to your main config if not already present)
remote_transmitter:
  pin: GPIO14  # Change this to your IR LED pin
  carrier_duty_percent: 50%

# Sub-device configuration for ${device.name}
esphome:
  devices:
    - id: ${sanitizedDeviceNameSub}_device
      name: "${device.name}"

# Button entities for ${device.name} associated with sub-device
button:
`;

  device.codes.forEach((code) => {
    const sanitizedButtonName = code.name
      .replace(/[^a-zA-Z0-9_\s]/g, "")
      .trim();
    const buttonId = `${sanitizedDeviceNameSub}_${sanitizedButtonName.replace(/\s+/g, "_").toLowerCase()}`;

    yamlContentSub += `  - platform: template
    name: "${device.name} ${sanitizedButtonName}"
    id: ${buttonId}
    device_id: ${sanitizedDeviceNameSub}_device
    on_press:
${generateESPHomeCodeBlock(code)}
`;
  });
  return yamlContentSub;
}

function generateESPHomeCodeBlock(code: {
  code: string;
  name: string;
}): string {
  const codeLines = code.code.split("\n");
  const protocol = codeLines[0]?.replace(":", "") || "nec";

  const parameters: Record<string, string | number> = {};
  codeLines.slice(1).forEach((line: string) => {
    const trimmed = line.trim();
    if (trimmed && trimmed.includes(":")) {
      const [key, value] = trimmed.split(":").map((s) => s.trim());
      if (key && value) {
        if (value.startsWith("0x") || !isNaN(Number(value))) {
          parameters[key] = value.startsWith("0x") ? value : Number(value);
        } else {
          parameters[key] = value.replace(/"/g, "");
        }
      }
    }
  });

  let codeBlock = `      - remote_transmitter.transmit_${protocol}:\n`;

  // Protocol-specific parameter handling
  switch (protocol) {
    case "nec":
      if (parameters.address !== undefined) {
        codeBlock += `          address: ${parameters.address}\n`;
      }
      if (parameters.command !== undefined) {
        codeBlock += `          command: ${parameters.command}\n`;
      }
      if (parameters.command_repeats !== undefined) {
        codeBlock += `          command_repeats: ${parameters.command_repeats}\n`;
      }
      break;
    case "samsung":
      if (parameters.data !== undefined) {
        codeBlock += `          data: ${parameters.data}\n`;
      }
      if (parameters.nbits !== undefined) {
        codeBlock += `          nbits: ${parameters.nbits}\n`;
      }
      break;
    default:
      Object.entries(parameters).forEach(([key, value]) => {
        if (value !== undefined && value !== "") {
          if (
            typeof value === "string" &&
            !value.startsWith("0x") &&
            isNaN(Number(value))
          ) {
            codeBlock += `          ${key}: "${value}"\n`;
          } else {
            codeBlock += `          ${key}: ${value}\n`;
          }
        }
      });
      break;
  }

  return codeBlock;
}
